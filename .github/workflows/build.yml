name: CI/CD

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - feature/start-project

jobs:
  build_and_release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      # - name: Execute Python script to update platformio.ini
      #   run: python update_platformio_ini.py

      - name: Set Build Number in platformio.ini
        run: sed -i "s/\[_BUILD_NUMBER_\]/v0.0.${{ github.run_number }}/g" platformio.ini

      - name: Install PlatformIO Core
        run: |
          pip install platformio
          platformio update

      - name: Build Project
        run: platformio run

      - name: Rename firmware.bin files
        run: |
          for file in $(find .pio/build/**/ -name 'firmware.bin'); do
            version=$(echo ${{ github.run_number }})
            env=$(basename $(dirname "$file"))
            new_name="OrcaOne_${env}_v0.0.$version.bin"
            mv "$file" "$(dirname "$file")/$new_name"
          done
          chmod +r .pio/build/**/OrcaOne*.bin
          ls .pio/build/**/OrcaOne*.bin
        if: github.event_name != 'pull_request'

      - name: Upload Binaries
        id: upload_binaries
        uses: actions/upload-artifact@v3
        with:
          path: .pio/build/**/OrcaOne*.bin
        if: github.event_name != 'pull_request'

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASES_TOKEN }}
        with:
          tag_name: v0.0.${{ github.run_number }}
          release_name: v0.0.${{ github.run_number }}
          draft: true
          prerelease: false
          body: |
            Release automatically generated by CI/CD workflow.
        if: github.event_name != 'pull_request'

      - name: Upload Binaries Release Assets
        run: |
          for file in $(find .pio/build/** -name 'OrcaOne*.bin'); do
            echo "Uploading $file"
            curl \
              -X POST \
              --data-binary @"$file" \
              -H "Authorization: Bearer ${{ secrets.RELEASES_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              "${{ steps.create_release.outputs.upload_url }}=$(basename $file)"
          done
